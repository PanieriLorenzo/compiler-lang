@startebnf
source = ?SOF?, block_body, ?EOF?;
block_body = {statement}, [expression];
statement = (mod_declaration | use_declaration | variable_declaration | expression), ";";
mod_declaration = "mod", identifier, block;
block = "{", block_body, "}";
use_declaration = "use", use_tree;
use_tree = simple_path, ["as", identifier]
         | simple_path, "::", "{", use_tree, { ",", use_tree }, [","], "}";
variable_declaration = identifier, ":", type, "=", expression;
simple_path = ["::"], simple_path_segment, {"::", simple_path_segment};
simple_path_segment = "self"
                    | "super"
                    | identifier;
expression = "(", expression, ")"
           | block
           | if_expression
           | for_expression
           | loop_expression
           | match_expression
           | break_expression
           | return_expression
           | "continue"
           | literal_expression
           | subscript_expression
           | call_expression
           | unary_operator_expression
           | binary_operator_expression
           | identifier;
           
@endebnf
